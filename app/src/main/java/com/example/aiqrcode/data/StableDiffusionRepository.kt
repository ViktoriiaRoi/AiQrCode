package com.example.aiqrcode.data

import android.util.Base64
import com.example.aiqrcode.data.model.ControlNet
import com.example.aiqrcode.data.model.ControlNetArgs
import com.example.aiqrcode.data.model.ImageRequest
import com.example.aiqrcode.data.model.ImageResponse
import com.example.aiqrcode.data.model.Scripts
import com.example.aiqrcode.ui.SetupParams
import com.google.gson.Gson
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.RequestBody.Companion.toRequestBody
import okhttp3.ResponseBody
import retrofit2.Response

interface StableDiffusionRepository {
    suspend fun generateImage(params: SetupParams): Result<ByteArray>
}

class StableDiffusionRepositoryImpl(
    private val imageService: StableDiffusionService
) : StableDiffusionRepository {

    private val gson = Gson()

    override suspend fun generateImage(params: SetupParams): Result<ByteArray> {
        val imageString = ""
        val imageRequest = createImageRequest(
            prompt = params.prompt,
            image = imageString,
            weight = 1.8f
        )
        val mediaType = "application/json".toMediaType()
        val requestBody = gson.toJson(imageRequest).toRequestBody(mediaType)

        return try {
            val response = imageService.generateImage(requestBody)
            processResponse(response)
        } catch (e: Exception) {
            Result.failure(e)
        }
    }

    private fun processResponse(response: Response<ResponseBody>): Result<ByteArray> {
        val body = response.body()
        if (response.isSuccessful && body != null) {
            val decoded = decodeImage(body.string())
            return decoded?.let {
                Result.success(decoded)
            } ?: Result.failure(Exception("Failed to decode image"))
        } else {
            return Result.failure(Exception("Unsuccessful network call: ${response.message()}"))
        }
    }

    private fun decodeImage(jsonString: String): ByteArray? {
        val imageResponse = gson.fromJson(jsonString, ImageResponse::class.java)
        return imageResponse.images.firstOrNull()?.let {
            Base64.decode(it, Base64.DEFAULT)
        }
    }

    private fun createImageRequest(prompt: String, image: String, weight: Float) =
        ImageRequest(
            prompt = prompt,
            negative_prompt = "ugly, disfigured, low quality, blurry, nsfw",
            width = 512,
            height = 512,
            steps = 10,
            alwayson_scripts = Scripts(
                controlnet = ControlNet(
                    args = listOf(
                        ControlNetArgs(
                            input_image = image,
                            model = "control_v1p_sd15_qrcode_monster_v2 [5e5778cb]",
                            weight = weight
                        )
                    )
                )
            )
        )
}